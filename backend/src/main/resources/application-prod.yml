spring:
  config:
    import: application-secret.yml
  datasource:
    url: ${DATABASE.URL}  # ✅ 환경 변수로 MySQL 설정 가능
    username: ${DATABASE.USERNAME}
    password: ${DATABASE.PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      auto-commit: false
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: false
        highlight_sql: false
        use_sql_comments: false
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE.CLIENT_ID}
            client-secret: ${GOOGLE.SECURITY_PASSWORD}
            scope:
              - profile
              - email
  data:
    redis:
      host: ${REDIS.HOST}
      port: ${REDIS.PORT}
      password: ${REDIS.PASSWORD}
  logging:
    level:
      com.example: INFO
      org.hibernate.SQL: INFO
      org.hibernate.orm.jdbc.bind: INFO
      org.hibernate.orm.jdbc.extract: INFO
      org.springframework.transaction.interceptor: INFO

  custom:
    site:
      domain: "${custom.prod.domain}"
      backUrl: "${custom.prod.backUrl}"
      frontUrl: "${custom.prod.frontUrl}"
    genFile:
      dirPath: /gen

  cloud: # AWS 클라우드 설정
    aws:
      s3:
        bucket: profile-image # S3 버킷 이름 설정
      credentials:
        access-key: ${AWS.ACCESS_KEY}  # 환경 변수로 AWS 접근 키 설정
        secret-key: ${AWS.SECRET_KEY}  # 환경 변수로 AWS 비밀 키 설정
      region:
        static: ap-northeast-2  # AWS 리전 설정 (서울 리전)
      stack:
        auto: false  # 자동 스택 생성 여부 설정
  jwt:
    secret: ${JWT.SECRET}
    expiration:
      access-token: ${JWT.EXPIRATION.ACCESS_TOKEN}
      refresh-token: ${JWT.EXPIRATION.REFRESH_TOKEN}
    cookie-domain: ${JWT.COOKIE_DOMAIN} # 도메인
    cookie-path: ${JWT.COOKIE_PATH}

  redis:
    time_to_live:
      likes: 86400 # 24h
      liked: 86400 # 24h
      matching: 3600 # 1h
